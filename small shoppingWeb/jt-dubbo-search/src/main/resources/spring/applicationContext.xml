<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!--1.配置包扫描  -->
	<context:component-scan base-package="com.jt"/>
	
	<!--2.引入外部的配置文件  -->
	<bean id="placeholderConfigurer" 
	class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!--设定参数   Resource[] locations;-->
		<property name="locations">
			<list>
				<value>classpath:/properties/jdbc.properties</value>
				<value>classpath:/properties/solr.properties</value>
				<value>classpath:/properties/redis.properties</value>
			</list>
		</property>
	</bean>

<!--说明:
	1.改标签可以导入外部的properties文件,
	但是只能导入一个或一类文件
	
	jdbc*.pro...  表示导入以jdbc开头的配置文件
	*.pro		  配置所有的配置文件
 -->
<!-- <context:property-placeholder 
location="classpath:/properties/jdbc.properties"/> -->
	
	<!--2.配置数据源  -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 相应驱动的jdbcUrl -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAge" value="30" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="150" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="5" />
	</bean>
	
	<!--3.引入声明式的事务控制
		1.注解形式  开启事务的注解
			@Transactional(propagation=Propagation.REQUIRED)
		  注解形式的弊端:每一个方法都需要手动的添加事务控制,比较的繁琐
		
		2.配置文件的方式 ~~~核心思想AOP~~~~~代理
		  通知+切入点(切入点表达式)
	  -->
	  
	<!-- <tx:annotation-driven/> -->
	
	<!--3.0 配置事务管理器  -->
	<bean id="transactionManager" 
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!--3.1配置声明式事务处理的通知
		transactionManager:表示事务管理器, 
		需要控制事务是否提交/回滚,
		如果事务管理器的名称是默认的,则可以省略该配置
		
		事务的管理策略:
		 1.增/删/改  需要事务控制
		 2.查询	       不需要事务,配置只读
		 3.其他方法   不需要事务,配置只读 
		
		事务的传播属性:
			propagation="REQUIRED" 必须添加事务
			propagation="SUPPORTS" 事务支持的()
			propagation="NEVER"    不使用事务
	  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="save*" propagation="REQUIRED"/>
				<tx:method name="delete*" propagation="REQUIRED"/>
				<tx:method name="update*" propagation="REQUIRED"/>
				<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
				<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
			</tx:attributes>
	</tx:advice>
	
	<!--3.2配置AOP的切面 
		回顾:AOP的动态代理方式  1.JDK 2.cglib动态代理
		默认的代理方式:
		如果实现了接口则采用jdk的动态代理方式
		如果没有实现接口,采用cglib动态代理方式
		
		proxy-target-class="true"
		表示强制使用cgLib实现动态代理
		补充说明:一般采用spring中的默认的策略.
		
		知识回顾
		表达式的写法:
			1.within(包名.类名)	
			控制方式是类级别的,全部的方法都需要添加事务控制
			
			2.execution(返回值类型 包名.类名.方法名(参数列表))
	 -->
	<aop:config>
		<!--配置切入点  -->
		<aop:pointcut expression="execution(* com.jt.search.service..*.*(..))" id="pc"/>
		<!--配置通知  -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
	
</beans>